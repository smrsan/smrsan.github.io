/*
    Auto-generated by: https://github.com/pmndrs/gltfjsx
    --> and developed by me :)
*/

import { useEffect, useLayoutEffect, useRef } from "react";
import { useGLTF, PerspectiveCamera, useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

export function TrainModel({ scrollProgressRef, ...props }) {
    const group = useRef();
    const { nodes, materials, animations } = useGLTF("/models/train.glb");
    const { actions, mixer } = useAnimations(animations, group);

    // Convert all materials to MeshToonMaterial
    useLayoutEffect(() => {
        Object.keys(materials).forEach((key) => {
            const originalMaterial = materials[key];
            materials[key] = new THREE.MeshToonMaterial({
                color: originalMaterial.color,
                map: originalMaterial.map,
                emissive:
                    originalMaterial.emissive || new THREE.Color(0x000000), // Set a default color if undefined
                emissiveMap: originalMaterial.emissiveMap || null,
                emissiveIntensity: originalMaterial.emissiveIntensity || 1,
                // gradientMap: new THREE.TextureLoader().load("/textures/gradient.png"),
            });
        });
    }, [materials]);

    useEffect(() => {
        Object.values(actions).forEach((act) => {
            // act.reset();
            act.play();
        });
    }, [actions]);

    useFrame(() => {
        const targetTime =
            animations[0]?.duration * (scrollProgressRef?.current || 0);

        // Set each action's time to the target time on every frame
        Object.values(actions).forEach((act) => {
            act.time = targetTime;
            mixer.update(0); // This is needed to make the change visible
        });
    });

    return (
        <>
            <ambientLight intensity={Math.PI} />
            <directionalLight
                intensity={Math.PI}
                position={[0, 20, 0]}
                rotation={[0, 0, 0]}
            />
            <group ref={group} {...props} dispose={null}>
                <group name="Scene">
                    <PerspectiveCamera
                        name="Camera001"
                        makeDefault={true}
                        far={100}
                        near={0.1}
                        fov={22.895}
                        position={[-1.324, 5.627, -6.641]}
                        rotation={[-2.717, 1.3, 2.731]}
                    />
                    <group name="Plane" scale={19.922}>
                        <mesh
                            name="Plane_1"
                            castShadow
                            receiveShadow
                            geometry={nodes.Plane_1.geometry}
                            material={materials.Plane_BAKED}
                        />
                        <mesh
                            name="Plane_2"
                            castShadow
                            receiveShadow
                            geometry={nodes.Plane_2.geometry}
                            material={materials.Plane_BAKED}
                        />
                        <mesh
                            name="Plane_3"
                            castShadow
                            receiveShadow
                            geometry={nodes.Plane_3.geometry}
                            material={materials.Plane_BAKED}
                        />
                    </group>
                    <group name="Plane001" position={[0, 0, -4.505]}>
                        <mesh
                            name="Plane001_1"
                            castShadow
                            receiveShadow
                            geometry={nodes.Plane001_1.geometry}
                            material={materials["Plane.001_BAKED"]}
                        />
                        <mesh
                            name="Plane001_2"
                            castShadow
                            receiveShadow
                            geometry={nodes.Plane001_2.geometry}
                            material={materials["Plane.001_BAKED"]}
                        />
                        <group name="BÃ©zierCurve" />
                    </group>
                    <mesh
                        name="TRAIN"
                        castShadow
                        receiveShadow
                        geometry={nodes.TRAIN.geometry}
                        material={materials.TRAIN_BAKED}
                        position={[-41.844, 0.992, 3.616]}
                        rotation={[0, -1.376, 0]}
                        scale={0.473}
                    />
                    <mesh
                        name="vagon001"
                        castShadow
                        receiveShadow
                        geometry={nodes.vagon001.geometry}
                        material={materials["vagon.001_BAKED"]}
                        position={[-46.356, 1.136, 4.661]}
                        rotation={[0, -1.301, 0]}
                        scale={0.473}
                    />
                    <mesh
                        name="vagon002"
                        castShadow
                        receiveShadow
                        geometry={nodes.vagon002.geometry}
                        material={materials["vagon.001_BAKED"]}
                        position={[-49.074, 1.136, 5.521]}
                        rotation={[0, -1.22, 0]}
                        scale={0.473}
                    />
                    <mesh
                        name="vagon003"
                        castShadow
                        receiveShadow
                        geometry={nodes.vagon003.geometry}
                        material={materials["vagon.001_BAKED"]}
                        position={[-51.722, 1.136, 6.657]}
                        rotation={[0, -1.107, 0]}
                        scale={0.473}
                    />
                </group>
            </group>
        </>
    );
}

useGLTF.preload("/train.glb");
